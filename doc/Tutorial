== Configure and build ==

$ ./configure
$ make

This produces an executable file name ./taskmapper

== Definitions ==

Objective function: Objective function defines the goodness of a solution
by a value often simply referred to as 'objective'. The objective must
be a positive value. Taskmapper tries to find an optimum solution that has
the smallest possible objective, that is, the lower the better.
Optimization means finding a minimum value for the objective.
Objective is often the execution time of the application that is being mapped.

PE: A processing element is a processor that executes tasks. It is assumed
that PE memory spaces are separate. Message passing is needed to share
data among different PEs.

Task: Task is the basic unit of mapping. Each task is located on a PE
that executes it. Task consists of instructions.  Instruction can not
be interrupted while it is executed, unless the instruction blocks for
communication. A PE may execute only one instruction at a time.

Interconnect: Interconnect is a communication channel used to relay
messages between tasks that are located on different PEs.

Schedule: Schedule is a time table of tasks being executed on a set of PEs.
Schedule yields the execution time of the application. Scheduling is a
process of determining the schedule - the time table of executing tasks.

Mapping: Mapping means determining the placement of tasks onto PEs.
Taskmapper places tasks on PEs to minimize the objective.

== Examples ==

Task mapper reads input from standard input and produces results onto
standard output.

The input format consists of three sections:

1. Architecture of the simulated HW system
2. Task graph to be mappend and scheduled to the HW system
3. Optimization method and parameters

The input can be generated from examples by a following shell pattern:
$ cd examples
$ cat arch-b-dd kpn-cyclic-32-1 opt_time_sa_autotemp |../taskmapper

The first argument to 'cat' command is the architecture file. The second
is a Kahn Process Network (task graph), and the third is the
Simulated Annealing optimization method and its parameters.

There are several files in example/ directory that can be used for
testing.

=== Example 1: Map 32 node tasks onto 2 PEs with Simulated Annealing ===

Optimize a 32 node task graph onto 2 PEs with Simulated Annealing:

$ cd example
$ cat example-arch-b-dd-kpn-cyclic-32-1-sa-autotemp.job |../taskmapper

This should run to completion in a few seconds.

The file example-arch-b-dd-kpn-cyclic-32-1-brute-force.job contains
the same problem but optimized with brute force.  File
example-arch-b-dd-kpn-cyclic-32-1-brute-force.result contains the
result (global optimum). Brute force runs a very long time, maybe a
week or so. The result file contains the global optimum reference
value, and the associated gain value. Gain value is defined the
initial objective value divided by the best (smallest) objective
value.  In this case gain is the same as speedup. For example, speedup
value 2.0 means the application performance doubled in optimization.
The optimal speedup for that particular example is approximately
1.635. SA has converged to the global optimum if the output contains
the following line: "gain: 1.635"

The SA result is printed on the standard output. It should look
something like this:

pe: id 0 freq 300000000 perf 1.000000e+00 area 1.000000e-06
pe: id 1 freq 300000000 perf 1.000000e+00 area 1.000000e-06
interconnect: id 0 freq 200000000 area 2.000000e-07 width 32 latency 8 policy 0
interconnect: id 1 freq 200000000 area 2.000000e-07 width 32 latency 8 policy 0
...
ntasks: 32
pes: 2
...
initial_objective: 0.000875617		<- The initial cost function value
initial_time: 0.000875617		<- Initial execution time
	      				   (same as cost in this example)
best_objective: 0.000558700		<- Optimized cost function value
best_time: 0.000558700			<- Optimzied execution time
	   				   (same as cost in this example)
gain: 1.567				<- Gain, aka speedup in this example.
                                           Gain is defined as initial objective
					   divided by best objective.
					   The optimized application runs 56.7%
					   faster.
time_gain: 1.567
...
evaluations: 1860			<- Number of evaluated mappings
optimization_time: 0.472029		<- Optimization time in seconds
		   			   as returned by getrusage (2)
optimization_started: 2010-12-14 15:40:58
optimization_ended: 2010-12-14 15:40:59
